"""
The base input object for all input objects
"""
input CreateTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The text of the tweet
  """
  text: String!
}

"""
Autogenerated return type of CreateTweet.
"""
type CreateTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  A boolean indicating if the tweet was created successfully
  """
  success: Boolean!

  """
  The tweet
  """
  tweet: Tweet
}

"""
The base input object for all input objects
"""
input DeleteTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the tweet to be deleted.
  """
  tweetId: ID!
}

"""
Autogenerated return type of DeleteTweet.
"""
type DeleteTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of errors.
  """
  errors: [String!]!

  """
  A boolean indicating if the tweet was deleted successfully.
  """
  success: Boolean!
}

"""
The base input object for all input objects
"""
input FollowUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the user
  """
  userId: ID!
}

"""
Autogenerated return type of FollowUser.
"""
type FollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The success of the mutation
  """
  success: Boolean
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Get the current user
"""
type Me {
  """
  The errors that occurred
  """
  errors: [String!]!

  """
  Whether the query was successful
  """
  success: Boolean!

  """
  The current user
  """
  user: User
}

"""
The mutation root of this schema
"""
type Mutation {
  """
  Create a new tweet
  """
  createTweet(
    """
    Parameters for CreateTweet
    """
    input: CreateTweetInput!
  ): CreateTweetPayload

  """
  Delete a tweet
  """
  deleteTweet(
    """
    Parameters for DeleteTweet
    """
    input: DeleteTweetInput!
  ): DeleteTweetPayload

  """
  Follow a user
  """
  followUser(
    """
    Parameters for FollowUser
    """
    input: FollowUserInput!
  ): FollowUserPayload

  """
  Sign in a user
  """
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload

  """
  Sign out a user
  """
  signOut(
    """
    Parameters for SignOut
    """
    input: SignOutInput!
  ): SignOutPayload

  """
  Sign up a new user
  """
  signUp(
    """
    Parameters for SignUp
    """
    input: SignUpInput!
  ): SignUpPayload

  """
  Unfollow a user
  """
  unFollowUser(
    """
    Parameters for UnFollowUser
    """
    input: UnFollowUserInput!
  ): UnFollowUserPayload
}

"""
The root query
"""
type Query {
  """
  Get the current user
  """
  me: Me!
}

"""
The base input object for all input objects
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The password of the user
  """
  password: String!

  """
  The username of the user
  """
  username: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  The auth token of the user
  """
  authToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The user
  """
  user: User
}

"""
The base input object for all input objects
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The success of the mutation
  """
  success: Boolean
}

"""
The base input object for all input objects
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email of the user
  """
  email: String!

  """
  The name of the user
  """
  name: String!

  """
  The password of the user
  """
  password: String!

  """
  The username of the user
  """
  username: String!
}

"""
Autogenerated return type of SignUp.
"""
type SignUpPayload {
  """
  The auth token of the user
  """
  authToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The user
  """
  user: User
}

"""
A tweet
"""
type Tweet {
  """
  The creation date of the tweet
  """
  createdAt: ISO8601DateTime!

  """
  The id of the tweet
  """
  id: ID!

  """
  A boolean indicating if the tweet is a reply
  """
  isReply: Boolean!

  """
  A boolean indicating if the tweet is a retweet
  """
  isRetweet: Boolean!

  """
  The text of the tweet
  """
  text: String

  """
  The user that created the tweet
  """
  user: User!
}

"""
The base input object for all input objects
"""
input UnFollowUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the user to be unfollowed.
  """
  followedUserId: ID!
}

"""
Autogenerated return type of UnFollowUser.
"""
type UnFollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns error if the user is not unfollowed.
  """
  errors: [String!]

  """
  Returns true if the user is unfollowed.
  """
  success: Boolean
}

"""
A user
"""
type User {
  """
  The bio of the user
  """
  bio: String

  """
  The email of the user
  """
  email: String!

  """
  The id of the user
  """
  id: ID!

  """
  The location of the user
  """
  location: String

  """
  The name of the user
  """
  name: String!

  """
  The username of the user
  """
  username: String!

  """
  The website of the user
  """
  website: String
}
