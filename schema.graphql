"""
The base input object for all input objects
"""
input CreateRetweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the tweet to be retweeted
  """
  tweetId: ID!
}

"""
Autogenerated return type of CreateRetweet.
"""
type CreateRetweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  A boolean indicating if the tweet was created successfully
  """
  success: Boolean!

  """
  The tweet
  """
  tweet: Tweet
}

"""
The base input object for all input objects
"""
input CreateTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The text of the tweet
  """
  text: String!
}

"""
Autogenerated return type of CreateTweet.
"""
type CreateTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  A boolean indicating if the tweet was created successfully
  """
  success: Boolean!

  """
  The tweet
  """
  tweet: Tweet
}

"""
The base input object for all input objects
"""
input DeleteTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the tweet to be deleted.
  """
  tweetId: ID!
}

"""
Autogenerated return type of DeleteTweet.
"""
type DeleteTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of errors.
  """
  errors: [String!]

  """
  A boolean indicating if the tweet was deleted successfully.
  """
  success: Boolean!
}

"""
The base input object for all input objects
"""
input FollowUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the user
  """
  userId: ID!
}

"""
Autogenerated return type of FollowUser.
"""
type FollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The success of the mutation
  """
  success: Boolean
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
LikeType
"""
type Like {
  """
  ID
  """
  id: ID!

  """
  Tweet
  """
  tweet: Tweet!

  """
  User
  """
  user: User!
}

"""
The connection type for Like.
"""
type LikeConnection {
  """
  A list of edges.
  """
  edges: [LikeEdge]

  """
  A list of nodes.
  """
  nodes: [Like]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type LikeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Like
}

"""
The base input object for all input objects
"""
input LikeTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the tweet to like
  """
  tweetId: ID!
}

"""
Autogenerated return type of LikeTweet.
"""
type LikeTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors that occurred during the mutation
  """
  errors: [String!]

  """
  Whether the mutation was successful
  """
  success: Boolean!

  """
  The tweet that was liked
  """
  tweet: Tweet
}

"""
The base input object for all input objects
"""
input LikeUnlikeTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the tweet to like or unlike
  """
  tweetId: ID!
}

"""
Autogenerated return type of LikeUnlikeTweet.
"""
type LikeUnlikeTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors if any
  """
  errors: [String!]

  """
  Indicates if the operation was successful
  """
  success: Boolean!

  """
  The tweet
  """
  tweet: Tweet
}

"""
Get the current user
"""
type Me {
  """
  The errors that occurred
  """
  errors: [String!]

  """
  Whether the query was successful
  """
  success: Boolean!

  """
  The current user
  """
  user: User
}

"""
The mutation root of this schema
"""
type Mutation {
  """
  Create a new retweet
  """
  createRetweet(
    """
    Parameters for CreateRetweet
    """
    input: CreateRetweetInput!
  ): CreateRetweetPayload

  """
  Create a new tweet
  """
  createTweet(
    """
    Parameters for CreateTweet
    """
    input: CreateTweetInput!
  ): CreateTweetPayload

  """
  Delete a tweet
  """
  deleteTweet(
    """
    Parameters for DeleteTweet
    """
    input: DeleteTweetInput!
  ): DeleteTweetPayload

  """
  Follow a user
  """
  followUser(
    """
    Parameters for FollowUser
    """
    input: FollowUserInput!
  ): FollowUserPayload

  """
  Like a tweet
  """
  likeTweet(
    """
    Parameters for LikeTweet
    """
    input: LikeTweetInput!
  ): LikeTweetPayload

  """
  Like or unlike a tweet
  """
  likeUnlikeTweet(
    """
    Parameters for LikeUnlikeTweet
    """
    input: LikeUnlikeTweetInput!
  ): LikeUnlikeTweetPayload @deprecated(reason: "likeUnlikeTweet is deprecated. Use likeTweet or unlikeTweet instead.")

  """
  Remove a retweet
  """
  removeRetweet(
    """
    Parameters for RemoveRetweet
    """
    input: RemoveRetweetInput!
  ): RemoveRetweetPayload

  """
  Sign in a user
  """
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload

  """
  Sign out a user
  """
  signOut(
    """
    Parameters for SignOut
    """
    input: SignOutInput!
  ): SignOutPayload

  """
  Sign up a new user
  """
  signUp(
    """
    Parameters for SignUp
    """
    input: SignUpInput!
  ): SignUpPayload

  """
  Unfollow a user
  """
  unFollowUser(
    """
    Parameters for UnFollowUser
    """
    input: UnFollowUserInput!
  ): UnFollowUserPayload

  """
  Unlike a tweet
  """
  unlikeTweet(
    """
    Parameters for UnlikeTweet
    """
    input: UnlikeTweetInput!
  ): UnlikeTweetPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
The root query
"""
type Query {
  """
  Get the current user
  """
  me: Me!

  """
  Get all tweets
  """
  tweetIndex(
    """
    The query to search for tweets
    """
    query: String

    """
    The ID of the user
    """
    userId: ID
  ): TweetIndex!
}

"""
The base input object for all input objects
"""
input RemoveRetweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the tweet to be unretweeted
  """
  tweetId: ID!
}

"""
Autogenerated return type of RemoveRetweet.
"""
type RemoveRetweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  A boolean indicating if the retweet was deleted successfully
  """
  success: Boolean!

  """
  The tweet
  """
  tweet: Tweet
}

"""
A retweet
"""
type Retweet {
  """
  The creation date of the retweet
  """
  createdAt: ISO8601DateTime!

  """
  The id of the retweet
  """
  id: ID!

  """
  The tweet that was retweeted
  """
  tweet: Tweet!

  """
  The user that created the retweet
  """
  user: User!
}

"""
The connection type for Retweet.
"""
type RetweetConnection {
  """
  A list of edges.
  """
  edges: [RetweetEdge]

  """
  A list of nodes.
  """
  nodes: [Retweet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RetweetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Retweet
}

"""
The base input object for all input objects
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The password of the user
  """
  password: String!

  """
  The username of the user
  """
  username: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  The auth token of the user
  """
  authToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The user
  """
  user: User
}

"""
The base input object for all input objects
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The success of the mutation
  """
  success: Boolean
}

"""
The base input object for all input objects
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email of the user
  """
  email: String!

  """
  The name of the user
  """
  name: String!

  """
  The password of the user
  """
  password: String!

  """
  The username of the user
  """
  username: String!
}

"""
Autogenerated return type of SignUp.
"""
type SignUpPayload {
  """
  The auth token of the user
  """
  authToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The errors of the mutation
  """
  errors: [String!]

  """
  The user
  """
  user: User
}

"""
A tweet
"""
type Tweet {
  """
  The creation date of the tweet
  """
  createdAt: ISO8601DateTime!

  """
  The id of the tweet
  """
  id: ID!

  """
  A boolean indicating if the tweet is a reply
  """
  isReply: Boolean!

  """
  A boolean indicating if the tweet is a retweet
  """
  isRetweet: Boolean!

  """
  The likes of the tweet
  """
  likes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LikeConnection

  """
  The number of likes of the tweet
  """
  likesCount: Int!

  """
  The number of retweets of the tweet
  """
  retweetCount: Int!

  """
  The retweets of the tweet
  """
  retweets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RetweetConnection

  """
  The text of the tweet
  """
  text: String

  """
  The user that created the tweet
  """
  user: User!
}

"""
The connection type for Tweet.
"""
type TweetConnection {
  """
  A list of edges.
  """
  edges: [TweetEdge]

  """
  A list of nodes.
  """
  nodes: [Tweet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TweetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tweet
}

"""
Get the current user
"""
type TweetIndex {
  """
  The errors that occurred
  """
  errors: [String!]

  """
  Whether the query was successful
  """
  success: Boolean!

  """
  Tweet collection
  """
  tweets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TweetConnection
}

"""
The base input object for all input objects
"""
input UnFollowUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the user to be unfollowed.
  """
  followedUserId: ID!
}

"""
Autogenerated return type of UnFollowUser.
"""
type UnFollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns error if the user is not unfollowed.
  """
  errors: [String!]

  """
  Returns true if the user is unfollowed.
  """
  success: Boolean
}

"""
The base input object for all input objects
"""
input UnlikeTweetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the tweet to unlike
  """
  tweetId: ID!
}

"""
Autogenerated return type of UnlikeTweet.
"""
type UnlikeTweetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors that prevented the tweet from being unliked
  """
  errors: [String!]

  """
  Whether the tweet was unliked successfully
  """
  success: Boolean!

  """
  The tweet that was unliked
  """
  tweet: Tweet
}

"""
A user
"""
type User {
  """
  The bio of the user
  """
  bio: String

  """
  The email of the user
  """
  email: String!

  """
  The followers of the user
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The query to search for followers
    """
    query: String
  ): UserConnection

  """
  The number of followers of the user
  """
  followersCount: Int!

  """
  The followings of the user
  """
  followings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The query to search for followings
    """
    query: String
  ): UserConnection

  """
  The number of followings of the user
  """
  followingsCount: Int!

  """
  The id of the user
  """
  id: ID!

  """
  The likes of the user
  """
  likes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LikeConnection

  """
  The number of likes of the user
  """
  likesCount: Int!

  """
  The location of the user
  """
  location: String

  """
  The name of the user
  """
  name: String!

  """
  The profile picture of the user
  """
  profilePictureUrl: String

  """
  The number of retweets of the user
  """
  retweetCount: Int!

  """
  The retweets of the user
  """
  retweets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RetweetConnection

  """
  The tweets of the user
  """
  tweets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The query to search for tweets
    """
    query: String
  ): TweetConnection

  """
  The username of the user
  """
  username: String!

  """
  The website of the user
  """
  website: String
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}
